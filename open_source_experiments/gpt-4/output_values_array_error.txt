https://github.com/kestra-io/kestra/issues/5411

The yaml will produce error:
At flow: Cannot deserialize value of type java.lang.String from Array value (token JsonToken.START_ARRAY) at [Source: UNKNOWN; byte offset: #UNKNOWN] (through reference chain: io.kestra.core.models.flows.Flow["tasks"]->java.util.ArrayList[0]->io.kestra.plugin.core.output.OutputValues["values"]->java.util.HashMap["test"])

Environment
Kestra Version: 0.19, 0.18.8, 0.18.5, 0.17.0
Operating System (OS/Docker/Kubernetes): Docker
Java Version (if you don't run kestra in Docker):


package io.kestra.plugin.core.output;

import io.kestra.core.models.annotations.Example;
import io.kestra.core.models.annotations.Plugin;
import io.kestra.core.models.tasks.RunnableTask;
import io.kestra.core.models.tasks.Task;
import io.kestra.core.runners.RunContext;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;
import lombok.experimental.SuperBuilder;

import java.util.HashMap;
import java.util.Map;

@SuperBuilder
@ToString
@EqualsAndHashCode
@Getter
@NoArgsConstructor
@Schema(
    title = "Output one or more values.",
    description = """
    You can use this task to return some outputs and pass them to downstream tasks.
    It's helpful for parsing and returning values from a task. You can then access these outputs in your downstream tasks
    using the expression {{ outputs.mytask_id.values.my_output_name }} and you can see them in the Outputs tab.
    The values can be strings, numbers, arrays, or any valid JSON object.
    """
)
@Plugin(
    examples = {
        @Example(
            full = true,
            code = """
id: outputs_flow
namespace: company.team

tasks:
  - id: output_values
    type: io.kestra.plugin.core.output.OutputValues
    values:
      taskrun_data: "{{ task.id }} > {{ taskrun.startDate }}"
      execution_data: "{{ flow.id }} > {{ execution.startDate }}"
      number_value: 42
      array_value: ["{{ task.id }}", "{{ flow.id }}", "static value"]
      nested_object:
        key1: "value1"
        key2: "{{ execution.id }}"

  - id: log_values
    type: io.kestra.plugin.core.log.Log
    message: |
      Got the following outputs from the previous task:
      {{ outputs.output_values.values.taskrun_data }}
      {{ outputs.output_values.values.execution_data }}"""
        )
    }
)
public class OutputValues extends Task implements RunnableTask<OutputValues.Output> {
    @Schema(
        title = "The templated strings to render.",
        description = "These values can be strings, numbers, arrays, or objects. Templated strings (enclosed in {{ }}) will be rendered using the current context."
    )
    private HashMap<String, Object> values;


    @Override
    public OutputValues.Output run(RunContext runContext) throws Exception {
        return OutputValues.Output.builder()
            .values(runContext.render(values))
            .build();
    }

    @Builder
    @Getter
    public static class Output implements io.kestra.core.models.tasks.Output {
        @Schema(
            title = "The generated values."
        )
        private Map<String, Object> values;
    }
}
ChatGPT said:
ChatGPT
The error you're encountering suggests that the YAML deserialization is trying to interpret an array as a string, which typically happens when the expected data structure doesn't match the actual data structure in your YAML configuration.

Here's how to troubleshoot and fix the issue:

Possible Causes and Fixes
YAML Structure: Ensure that the structure of your YAML matches the expected Java class definitions. In your OutputValues class, values is defined as a HashMap<String, Object>. When you're defining arrays in YAML, they should map correctly to the Java types.

YAML Example:

yaml
Copy code
id: outputs_flow
namespace: company.team

tasks:
  - id: output_values
    type: io.kestra.plugin.core.output.OutputValues
    values:
      taskrun_data: "{{ task.id }} > {{ taskrun.startDate }}"
      execution_data: "{{ flow.id }} > {{ execution.startDate }}"
      number_value: 42
      array_value:
        - "{{ task.id }}"
        - "{{ flow.id }}"
        - "static value"
      nested_object:
        key1: "value1"
        key2: "{{ execution.id }}"
Ensure that arrays are properly formatted using the - character.

Rendering Context: Make sure the context from which you're rendering the output values is correctly set up. If any of the referenced variables are not defined or are of the wrong type, it can lead to deserialization errors.

Java Class Definitions: Check that your OutputValues class is set up correctly to handle the types that you expect. You might want to change the Object type in the values map to more specific types if you know what you're expecting.

Dependencies: Ensure that youâ€™re using compatible versions of Kestra and its plugins. Sometimes, mismatches can lead to unexpected behavior.

Debugging: Add logging to see what the rendered output looks like right before you return it in the run method. This can help identify if the issue is with the output being generated:

java
Copy code
@Override
public OutputValues.Output run(RunContext runContext) throws Exception {
    Map<String, Object> renderedValues = runContext.render(values);
    // Log the rendered values for debugging
    System.out.println("Rendered values: " + renderedValues);
    return OutputValues.Output.builder()
        .values(renderedValues)
        .build();
}
Summary
By ensuring that your YAML structure matches the expected Java types, checking the context for rendering, and adding some debugging output, you should be able to pinpoint and resolve the deserialization issue. If the problem persists, consider simplifying your values temporarily to isolate the issue further.



