https://github.com/apache/dubbo/pull/14742

java.lang.RuntimeException: java.lang.IllegalStateException: Extension instance (name: spring, class: interface org.apache.dubbo.rpc.protocol.tri.rest.mapping.RequestMappingResolver) couldn't be instantiated: null #14740


Pre-check
 I am sure that all the content I provide is in English.
Search before asking
 I had searched in the issues and found no similar issues.
Apache Dubbo Component
Java SDK (apache/dubbo)

Dubbo Version
spring-boot 2.7.14
spring-cloud 2021.0.8
spring-cloud-alibaba 2021.0.4.0
Dubbo 3.3.0
JDK 1.8

Steps to reproduce this issue
When I use dubbo-bom 3.2.16 in the project, everything starts up normally and external services can be provided without any issues. However, when I try to upgrade to dubbo-bom 3.3.0, starting the Spring Boot application results in an error related to multiple ConversionService Beans. I am currently unable to solve this issue, so I need help on how to upgrade to dubbo-bom 3.3.0 and ensure that the application starts up successfully. Thank you.

java.lang.RuntimeException: java.lang.IllegalStateException: Extension instance (name: spring, class: interface org.apache.dubbo.rpc.protocol.tri.rest.mapping.RequestMappingResolver) couldn't be instantiated: null
	at org.apache.dubbo.registry.integration.ExporterFactory.lambda$createExporter$0(ExporterFactory.java:33)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at org.apache.dubbo.registry.integration.ExporterFactory.createExporter(ExporterFactory.java:29)
	at org.apache.dubbo.registry.integration.RegistryProtocol.doLocalExport(RegistryProtocol.java:354)
	at org.apache.dubbo.registry.integration.RegistryProtocol.export(RegistryProtocol.java:289)
	at org.apache.dubbo.rpc.protocol.ProtocolSecurityWrapper.export(ProtocolSecurityWrapper.java:84)
	at org.apache.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:79)
	at org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:66)
	at org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:58)
	at org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper.export(ProtocolSerializationWrapper.java:50)
	at org.apache.dubbo.rpc.protocol.InvokerCountWrapper.export(InvokerCountWrapper.java:42)
	at org.apache.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java)
	at org.apache.dubbo.config.ServiceConfig.doExportUrl(ServiceConfig.java:969)
	at org.apache.dubbo.config.ServiceConfig.exportRemote(ServiceConfig.java:939)
	at org.apache.dubbo.config.ServiceConfig.exportUrl(ServiceConfig.java:876)
	at org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:622)
	at org.apache.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:600)
	at org.apache.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:555)
	at org.apache.dubbo.config.ServiceConfig.export(ServiceConfig.java:343)
	at org.apache.dubbo.config.deploy.DefaultModuleDeployer.exportServiceInternal(DefaultModuleDeployer.java:495)
	at org.apache.dubbo.config.deploy.DefaultModuleDeployer.exportServices(DefaultModuleDeployer.java:442)
	at org.apache.dubbo.config.deploy.DefaultModuleDeployer.startSync(DefaultModuleDeployer.java:177)
	at org.apache.dubbo.config.deploy.DefaultModuleDeployer.start(DefaultModuleDeployer.java:159)
	at org.apache.dubbo.config.spring.context.DubboDeployApplicationListener.onContextRefreshedEvent(DubboDeployApplicationListener.java:167)
	at org.apache.dubbo.config.spring.context.DubboDeployApplicationListener.onApplicationEvent(DubboDeployApplicationListener.java:153)
	at org.apache.dubbo.config.spring.context.DubboDeployApplicationListener.onApplicationEvent(DubboDeployApplicationListener.java:52)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:176)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:169)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:143)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:421)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:378)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:586)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:731)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1292)
	at com.ssm.app.application.SsmApplication.main(SsmApplication.java:32)
Caused by: java.lang.IllegalStateException: Extension instance (name: spring, class: interface org.apache.dubbo.rpc.protocol.tri.rest.mapping.RequestMappingResolver) couldn't be instantiated: null
	at org.apache.dubbo.common.extension.ExtensionLoader.createExtension(ExtensionLoader.java:818)
	at org.apache.dubbo.common.extension.ExtensionLoader.getExtension(ExtensionLoader.java:575)
	at org.apache.dubbo.common.extension.ExtensionLoader.getExtension(ExtensionLoader.java:549)
	at org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtensions(ExtensionLoader.java:451)
	at org.apache.dubbo.common.extension.ExtensionAccessor.getActivateExtensions(ExtensionAccessor.java:51)
	at org.apache.dubbo.rpc.protocol.tri.rest.mapping.DefaultRequestMappingRegistry.init(DefaultRequestMappingRegistry.java:77)
	at org.apache.dubbo.rpc.protocol.tri.rest.mapping.DefaultRequestMappingRegistry.register(DefaultRequestMappingRegistry.java:87)
	at org.apache.dubbo.rpc.protocol.tri.TripleProtocol.export(TripleProtocol.java:124)
	at org.apache.dubbo.rpc.protocol.ProtocolSecurityWrapper.export(ProtocolSecurityWrapper.java:84)
	at org.apache.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:79)
	at org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:77)
	at org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:61)
	at org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper.export(ProtocolSerializationWrapper.java:50)
	at org.apache.dubbo.rpc.protocol.InvokerCountWrapper.export(InvokerCountWrapper.java:42)
	at org.apache.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java)
	at org.apache.dubbo.registry.integration.RegistryProtocol.lambda$doLocalExport$3(RegistryProtocol.java:354)
	at org.apache.dubbo.registry.integration.ExporterFactory.lambda$createExporter$0(ExporterFactory.java:31)
	... 39 common frames omitted
Caused by: java.lang.reflect.InvocationTargetException: null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.apache.dubbo.common.beans.support.InstantiationStrategy.instantiate(InstantiationStrategy.java:94)
	at org.apache.dubbo.common.extension.ExtensionLoader.createExtensionInstance(ExtensionLoader.java:824)
	at org.apache.dubbo.common.extension.ExtensionLoader.createExtension(ExtensionLoader.java:780)
	... 55 common frames omitted
Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'org.springframework.core.convert.ConversionService' available: expected single matching bean but found 2: mvcConversionService,integrationConversionService
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveBean(DefaultListableBeanFactory.java:494)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:349)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1181)
	at org.apache.dubbo.rpc.protocol.tri.rest.support.spring.SpringRestToolKit.<init>(SpringRestToolKit.java:82)
	at org.apache.dubbo.rpc.protocol.tri.rest.support.spring.SpringMvcRequestMappingResolver.<init>(SpringMvcRequestMappingResolver.java:44)
	... 62 common frames omitted
What you expected to happen
The issue seems to be related to the order of bean loading during the startup between dubbo-bom 3.3.0 and spring-boot-starter-web in Spring Boot 2.7.14. The specific reason behind this is currently unknown.

Anything else
No response

Are you willing to submit a pull request to fix on your own?
 Yes I am willing to submit a pull request on my own!
Code of Conduct
 I agree to follow this project's Code of Conduct


/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.dubbo.rpc.protocol.tri.rest.support.spring;

import org.apache.dubbo.common.logger.Logger;
import org.apache.dubbo.common.logger.LoggerFactory;
import org.apache.dubbo.common.utils.CollectionUtils;
import org.apache.dubbo.config.spring.extension.SpringExtensionInjector;
import org.apache.dubbo.remoting.http12.HttpRequest;
import org.apache.dubbo.remoting.http12.HttpResponse;
import org.apache.dubbo.rpc.model.ApplicationModel;
import org.apache.dubbo.rpc.model.FrameworkModel;
import org.apache.dubbo.rpc.protocol.tri.rest.Messages;
import org.apache.dubbo.rpc.protocol.tri.rest.RestConstants;
import org.apache.dubbo.rpc.protocol.tri.rest.RestException;
import org.apache.dubbo.rpc.protocol.tri.rest.argument.GeneralTypeConverter;
import org.apache.dubbo.rpc.protocol.tri.rest.argument.TypeConverter;
import org.apache.dubbo.rpc.protocol.tri.rest.mapping.meta.MethodParameterMeta;
import org.apache.dubbo.rpc.protocol.tri.rest.mapping.meta.ParameterMeta;
import org.apache.dubbo.rpc.protocol.tri.rest.util.RestToolKit;
import org.apache.dubbo.rpc.protocol.tri.rest.util.RestUtils;

import java.lang.annotation.Annotation;
import java.lang.reflect.AnnotatedElement;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Map;

import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.DefaultParameterNameDiscoverer;
import org.springframework.core.MethodParameter;
import org.springframework.core.ParameterNameDiscoverer;
import org.springframework.core.annotation.AnnotatedElementUtils;
import org.springframework.core.convert.ConversionService;
import org.springframework.core.convert.TypeDescriptor;
import org.springframework.core.convert.support.DefaultConversionService;
import org.springframework.util.PropertyPlaceholderHelper;

final class SpringRestToolKit implements RestToolKit {

    private static final Logger LOGGER = LoggerFactory.getLogger(SpringRestToolKit.class);

    private final Map<MethodParameterMeta, TypeDescriptor> cache = CollectionUtils.newConcurrentHashMap();
    private final ConfigurableBeanFactory beanFactory;
    private final PropertyPlaceholderHelper placeholderHelper;
    private final ConfigurationWrapper configuration;
    private final ConversionService conversionService;
    private final TypeConverter typeConverter;
    private final BeanArgumentBinder argumentBinder;
    private final ParameterNameDiscoverer discoverer;

    public SpringRestToolKit(FrameworkModel frameworkModel) {
        ApplicationModel applicationModel = frameworkModel.defaultApplication();
        SpringExtensionInjector injector = SpringExtensionInjector.get(applicationModel);
        ApplicationContext context = injector.getContext();
        if (context instanceof ConfigurableApplicationContext) {
            beanFactory = ((ConfigurableApplicationContext) context).getBeanFactory();
            placeholderHelper = null;
            configuration = null;
        } else {
            beanFactory = null;
            placeholderHelper = new PropertyPlaceholderHelper("${", "}", ":", true);
            configuration = new ConfigurationWrapper(applicationModel);
        }
        if (context != null && context.containsBean("mvcConversionService")) {
            conversionService = context.getBean(ConversionService.class, "mvcConversionService");
        } else {
            conversionService = DefaultConversionService.getSharedInstance();
        }
        typeConverter = frameworkModel.getBeanFactory().getOrRegisterBean(GeneralTypeConverter.class);
        discoverer = new DefaultParameterNameDiscoverer();
        argumentBinder = new BeanArgumentBinder(frameworkModel, conversionService);
    }

    @Override
    public int getDialect() {
        return RestConstants.DIALECT_SPRING_MVC;
    }

    @Override
    public String resolvePlaceholders(String text) {
        if (!RestUtils.hasPlaceholder(text)) {
            return text;
        }
        if (beanFactory != null) {
            return beanFactory.resolveEmbeddedValue(text);
        }
        return placeholderHelper.replacePlaceholders(text, configuration);
    }

    @Override
    public Object convert(Object value, ParameterMeta parameter) {
        boolean tried = false;
        if (value instanceof Collection || value instanceof Map) {
            tried = true;
            Object target = typeConverter.convert(value, parameter.getGenericType());
            if (target != null) {
                return target;
            }
        }
        if (parameter instanceof MethodParameterMeta) {
            TypeDescriptor targetType = cache.computeIfAbsent(
                    (MethodParameterMeta) parameter,
                    k -> new TypeDescriptor(new MethodParameter(k.getMethod(), k.getIndex())));
            TypeDescriptor sourceType = TypeDescriptor.forObject(value);
            if (conversionService.canConvert(sourceType, targetType)) {
                try {
                    return conversionService.convert(value, sourceType, targetType);
                } catch (Throwable t) {
                    LOGGER.debug(
                            "Spring convert value '{}' from type [{}] to type [{}] failed",
                            value,
                            value.getClass(),
                            parameter.getGenericType(),
                            t);
                }
            }
        }
        Object target = tried ? null : typeConverter.convert(value, parameter.getGenericType());
        if (target == null && value != null) {
            throw new RestException(
                    Messages.ARGUMENT_CONVERT_ERROR,
                    parameter.getName(),
                    value,
                    value.getClass(),
                    parameter.getGenericType());
        }
        return target;
    }

    @Override
    public Object bind(ParameterMeta parameter, HttpRequest request, HttpResponse response) {
        return argumentBinder.bind(parameter, request, response);
    }

    @Override
    public String[] getParameterNames(Method method) {
        return discoverer.getParameterNames(method);
    }

    @Override
    public Map<String, Object> getAttributes(AnnotatedElement element, Annotation annotation) {
        return AnnotatedElementUtils.getMergedAnnotationAttributes(element, annotation.annotationType());
    }
}
ChatGPT said:
ChatGPT
The error you're encountering when upgrading to dubbo-bom 3.3.0 seems to stem from a conflict caused by multiple ConversionService beans being available in your Spring context. Specifically, the NoUniqueBeanDefinitionException indicates that the application is unable to resolve which ConversionService to use due to having multiple candidates (mvcConversionService and integrationConversionService).

Steps to Resolve the Issue
Examine Your Configuration:

Check your Spring Boot configuration to see if you can explicitly define which ConversionService you want to use. You can create a @Bean in your configuration class that specifies the desired ConversionService.
java
Copy code
@Bean
public ConversionService conversionService() {
    return new DefaultConversionService(); // or use your preferred service
}
Qualify the Bean:

If you have control over the components that are being created, you can use @Qualifier to specify which ConversionService should be injected where needed. This can help avoid the ambiguity that leads to the exception.
java
Copy code
@Autowired
@Qualifier("mvcConversionService")
private ConversionService conversionService;
Upgrade Dependencies:

Ensure that all related dependencies (Spring Boot, Spring Cloud, Spring Cloud Alibaba, and Dubbo) are compatible with each other. Sometimes, upgrading one dependency without the others can lead to incompatibilities.
Check Dubbo Configuration:

Look at your Dubbo configuration and ensure there are no conflicts arising from how services are defined or how they interact with Spring’s context.
Consult Dubbo Release Notes:

Review the Dubbo 3.3.0 release notes for any breaking changes or migration notes that might relate to your issue.
Debugging Context:

You can log the beans in your application context at startup to see all ConversionService beans that are being created. This might help pinpoint where the additional bean is coming from.
java
Copy code
@PostConstruct
public void logConversionServices() {
    String[] beans = applicationContext.getBeanNamesForType(ConversionService.class);
    System.out.println("Available ConversionServices: " + Arrays.toString(beans));
}
Spring Boot Starter Web:

If you are using spring-boot-starter-web, it automatically registers mvcConversionService. If you're not using MVC, consider excluding it if not necessary.
Alternative: Customizing the SpringRestToolKit
If these steps do not resolve the issue, you might need to look into customizing the SpringRestToolKit initialization to handle the multiple ConversionService beans more gracefully.

Conclusion
Upgrading dependencies can sometimes introduce complexities, especially with context management in Spring. The steps above should help guide you toward a solution. If you're still facing issues, consider creating a minimal reproducible example to share with the community or consult the Dubbo maintainers for further insights.



